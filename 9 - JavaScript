什么是JavaScript?

JavaScript是一门跨平台、面向对象的脚本语言（不需要经过编译），来控制网页行为的，它能使网页可交互
W3C标准:网页主要由三部分组成
    结构:HTML
    表现: cSs
    行为: JavaScript
    
JavaScript和Java是完全不同的语言，不论是概念还是设计。但是基础语法类似。

JavaScript(简称:JS)在1995 年由Brendan Eich 发明，并于1997年成为一部ECMA标准。
ECMAScript6(ES6)是最新的JavaScript版本(发布于2015年)。







JavaScript 引入方式:

1. 内部脚本:将JS代码定义在HTML页面中
   在HTML中，JavaScript代码必须位于<script>与</script>标签之间
   <script>
       alert("hello JS~");
   </script>
   
   提示:
       在HTML文档中可以在任意地方，放置任意数量的<script>。
       一般把脚本置于<body>元素的底部，可改善显示速度，因为脚本执行会拖慢显示







2．外部脚本:将JS代码定义在外部JS文件中，然后引入到HTML页面中
   外部文件: demo.js     alert("hello JS ~");
   引入外部js文件        <script src="../js/demo.js"></script>
   注意:
       1. 外部脚本不能包含<script>标签
       2. <script>标签不能自闭合


案例：

外部文件demo.js：

alert("hello js");






HTML文件：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>

    <!-- 警告框alert -->
    <!-- 在语法正确的情况下，script标签可以放于任意位置且任意数量，一般放于<body>底部 -->
    <script>
        alert("hello js");

    </script>


    <!-- 外部引入不能写成自闭合形式，即<script xxxx />，否则不会生效 -->
    <script src="../js/demo.js"></script>


</head>
<body>

</body>
</html>









JavaScript基础语法：

书写语法：
1.区分大小写: 与Java一样，变量名、函数名以及其他一切东西都是区分大小写的
2.每行结尾的分号可有可无（最好写上）
3.注释:
  单行注释: //注释内容
  多行注释: /*注释内容*/
4.大括号表示代码块

if(count == 3) {
  alert(count);
}







输出语句：

使用window.alert()写入警告框
使用document.write()写入HTML输出
使用console.log()写入浏览器控制台

window.alert("hello JS~");//弹出警告框
document.write("hello JS ~");//写入HTML
console.log("hello JS ~");//写入控制台








变量：


JavaScript中用var关键字(variable的缩写)来声明变量

var test = 20;
test = "张三";

JavaScript是一门弱类型语言，变量可以存放不同类型的值。
变量名需要遵循如下规则:
    组成字符可以是任何字母、数字、下划线(_)或美元符号($)
    数字不能开头
    建议使用驼峰命名
    
ECMAScript6新增了let关键字来定义变量。它的用法类似于var，但是所声明的变量，只在let关键字所在的代码块内有效，且不允许重复声明

ECMAScript6新增了const关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。



注意：
  var:
    1．作用域: 全局变量
    2．变量可以重复定义








数据类型：

JavaScript中分为:原始类型和引用类型

5种原始类型:
    number: 数字（整数、小数、NaN(Not a Number))
    string: 字符、字符串，单双引皆可
    boolean: 布尔。true，false
    null: 对象为空（typeof使用后显示object，起初是JavaScript的一个错误，现在,null被认为是对象的占位符，从而解释了这一矛盾）
    undefined: 当声明的变量未初始化时，该变量的默认值是undefined
    
使用typeof运算符可以获取数据类型
    alert(typeof age);






运算符：

一元运算符: ++，--
算术运算符: +， -， *， /，%
赋值运算符: =，+=，-=，…
关系运算符: >，<，>=，<=,!=,==,===...
逻辑运算符: &&，ll，!
三元运算符: 条件表达式? true_value : false_value



案例：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>


</head>
<body>

<script>

    /*
        ==:
           1. 判断类型是否一样，若不一样，则进行类型转换
           2. 再去比较其值
        ===: 全等于
           1. 判断类型是否一样，如果不一样，直接返回false
           2. 再去比较其值

    */

    var age1 = 20;
    var age2 = "20";

    alert(age1 == age2);// true
    alert(age === ag2);// false

    /*
    类型转换：
        其他类型转为number：
              1. string：按照字符串的字面值，转为数字，若不为数字，则转为NaN，一般使用parseInt方法
              2. boolean：true 转为1，false 转为0
    */

    var str = +"abc";//正号，表示转为数字
    alert(str + 1);
    alert(parseInt(str) + 1);


    /*
            其他类型转为boolean：
              1. number：0和NaN转为false，其他的数字转为true
              2. string：空字符串转为false，其他的字符串转为true
              3. null：false
              4. undefined：false
    */

    var flag = 3;

    if(flag){
        alert("true");
    }else{
        alert("false");
    }



    var flag = 3;

    //为了方便一般要使用健壮性判断，即if(str != null && str.length > 0)
    //现在javascript可以直接转换成if(str)，因为若str是null或为0，则直接是false
    if(flag){
        alert("true");
    }else{
        alert("false");
    }


</script>

</body>
</html>










流程控制语句：

if
switch
for
while
do...while








函数：

函数(方法）是被设计为执行特定任务的代码块
    定义: JavaScript函数通过function关键词进行定义，语法为:
          function functionName(参数1,参数2..){
              要执行的代码
          }
          
    注意:
         形式参数不需要类型。因为JavaScript是弱类型语言
         返回值也不需要定义类型，可以在函数内部直接使用return返回即可
         function add(a,b){
             return a + b;
         }
        
    调用: 函数名称(实际参数列表);
         let result = add(1,2);



案例：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>


</head>
<body>

<script>

    //方式一：
    function add(a, b) {
        return a + b;
    }

    var result = add(1, 2);
    alert(result);



    //方式二：
    var add = function (a, b) {
        return a + b;
    }

    var result = add(1, 2);
    alert(result);


    //调用：JS中，函数调用可以传递任意个参数

    var result = add(1,2,3);//前两个被接受，后面一个只是传过去了
    alert(result);

    var result = add(1);//数字1和NaN相加，最后还是NaN，参数个数并不影响函数调用
    alert(result);

</script>

</body>
</html>








JavaScript对象：Array、Boolean、Date、Math、Number、string、RegExp、Global



Array：

JavaScript Array对象用于定义数组。
定义:
    var 变量名 = new Array(元素列表); //方式一         var arr = new Array(1,2,3);
    var 变量名 = [元素列表];          //方式二         var arr = [1,2,3];
    
访问:
    arr[索引] = 值;
    arr[0] = l;
    
注意:JS数组类似于Java集合，长度，类型都可变

变长：
var arr3 = [1,2,3];
var arr3[10] = 10;
alert(arr3[10]);//结果为10
alert(arr3[9]);//结果为undefined


变类型：
arr3[5]= "hello";//对象中既包含数字类型又可以包含string类型


属性：
constructor                         返回对创建此对象的数组函数的引用。
length                              设置或返回数组中元素的数目。
prototype                           使您有能力向对象添加属性和方法。



方法：
concat()                               连接两个或更多的数组，并返回结果。
join()                                 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。
pop()                                  删除并返回数组的最后一个元素
push()                                 向数组的未尾添加一个或更多元素，并返回新的长度。
reverse()                              颠倒数组中元素的顺序。
shift()                                删除并返回数组的第一个元素
slice()                                从某个已有的数组返回选定的元素
sort()                                 对数组的元素进行排序
splice()                               删除元素，并向数组添加新元素。
toSource()                             返回该对象的源代码。
toString()                             把数组转换为字符串，并返回结果。
toLocaleString()                       把数组转换为本地数组，并返回结果。
unshift()                              向数组的开头添加一个或更多元素，并返回新的长度。
valueOf()                              返回数组对象的原始值







String：

定义:
    var 变量名 = new String(s);//方式一                     var str = new String("hello");
    var 变量名 = s;//方式二                                 var str = "hello";
                                                            var str = 'hello';

属性:
length                            字符串的长度

方法:
charAt()                          返回在指定位置的字符。
indexOf()                         检索字符串。
trim()                            去除字符串前后两端的空白字符

案例：
var str4 = '  abc  ';
alert(1 + str4.trim() + 1);//结果为1abc1








自定义对象：

格式：
var 对象名称 = {
               属性名称1:属性值1，
               属性名称2:属性值2,
               ...
               函数名称:function(形参列表){}
               ...
               };
               

实例：
var person = {
  name:"zhangsan",
  age:23,
  eat:function(){
      alert("干饭~");
  }
};
 
alert(person.name);
alert(person.age);
person.eat(;









BOM:

Browser Object Model 浏览器对象模型
JavaScript将浏览器的各个组成部分封装为对象
组成:
    Window: 浏览器窗口对象
    Navigator: 浏览器对象
    Screen: 屏幕对象
    History: 历史记录对象
    Location: 地址栏对象





Window:

获取: 直接使用window，其中window.可以省略
      window.alert("abc");
      
属性: 获取其他BOM对象
history                              对History对象的只读引用。请参数History对象。
Navigator                            对Navigator对象的只读引用。请参数Navigator对象。
Screen                               对Screen对象的只读引用。请参数Screen对象。
location                             用于窗口或框架的 Location对象。请参阅Location对象。

方法:
alert()                              显示带有一段消息和一个确认按钮的警告框。
confirm()                            显示带有一段消息以及确认按钮和取消按钮的对话框。（有返回值，为true和false）
setInterval()                        按照指定的周期(以毫秒计）来调用函数或计算表达式。（可以循环执行）
setTimeout()                         在指定的毫秒数后调用函数或计算表达式。(只执行一次)



案例：

setTimeout(function(){
    alert("hehe");
},3000);

setInterval(function(){
    alert("hehe");
},3000);






定时器案例：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

<input type="button" onclick="on()" value="开灯">
<img id="myImage" border="0" src="../imgs/off.gif" style="...">
<input type="button" onclick="off()" value="关灯">

<script>
    function on(){
        document.getElementById('myImage').src = '../imgs/on.gif';
    }

    function off(){
        document.getElementById('myImage').src = '../imgs/off.gif';
    }

    
    var x = 0;//根据一个变化的数字，产生固定个数的值
    setInterval(function (){
      if(x % 2 == 0){
          on();
      }else{
          off();
      }
      
      x++;
    },1000)

</script>


</body>
</html>








History：

获取:使用window.history获取，其中window.可以省略
    window.history.方法();
    history.方法();

方法:
back()                          加载history列表中的前一个URL。
forward()                       加载history列表中的下一个URL。






Location:

获取:使用window.location获取，其中window.可以省略
    window.location.方法();
    location.方法();

属性:
href                        设置或返回完整的URL。


案例：
location.href = "https://www.baidu.com";

//3秒跳转到首页
document.write("3秒跳转到首页... " );
setTimeout(function(){
    location.href = "https:/ www.baidu.com"
},3000);









DOM：

Document Object Model文档对象模型
将标记语言的各个组成部分封装为对象
    Document: 整个文档对象
    Element: 元素对象
    Attribute: 属性对象
    Text: 文本对象
    Comment: 注释对象




JavaScript 通过DOM，就能够对HTML进行操作了
    改变HTML元素的内容
    改变HTML元素的样式(CSS)
    对HTML DOM事件作出反应
    添加和删除HTML元素




DOM是W3C(万维网联盟)的标准
DOM定义了访问HTML和XML文档的标准:
W3C DOM标准被分为3个不同的部分:
    1. 核心DOM: 针对任何结构化文档的标准模型
          Document: 整个文档对象
          Element: 元素对象
          Attribute: 属性对象
          Text: 文本对象
          Comment: 注释对象
    2. XML DOM: 针对XML文档的标准模型
    3. HTML DOM: 针对HTML文档的标准模型
          Image: <img>
          Button: <input type='button'>




获取上Element：

Element:元素对象
获取: 使用Document对象的方法来获取
    1. getElementByld: 根据id属性值获取，返回一个Element对象
    2. getElementsByTagName: 根据标签名称获取，返回Element对象数组
    3. getElementsByName: 根据name属性值获取，返回Element对象数组
    4. getElementsByClassName: 根据class属性值获取，返回Element对象数组



案例：HTML对象的使用

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

<img id="light" src="../img/off.gif"> <br>
<div class="cls">嘿嘿嘿</div> <br>
<div class="cls">哈哈哈</div> <br>

<input type="checkbox" name="hobby"> 游戏
<input type="checkbox" name="hobby"> 电影
<br>

<script>

    var img = document.getElementById("light");
    img.src = "../img/on.gif";//利用DOM更改路径

    var divs = document.getElementsByTagName("div")
    for (let i = 0; i < divs.length; i++) {
        divs[i].style.color = 'red';//更改div标签内容的样式
        divs[i].innerHTML = '呵呵';//更改内容
    }
    
    var hobbys = document.getElementsByName("hobby");
    for (let i = 0; i < hobbys.length; i++) {
        hobbys[i].checked = "true";//更改是否被选中
    }
</script>

</body>
</html>








事件监听：

事件: HTML事件是发生在HTML元素上的“事情”。比如:
    按钮被点击
    鼠标移动到元素之上
    按下键盘按键
事件监听: JavaScript可以在事件被侦测到时执行代码



事件绑定：

事件绑定有两种方式:
    方式一: 通过HTML标签中的事件属性进行绑定
        <input type="button" onclick='on()>
        function on(){
            alert("我被点了");
        }
    方式二: 通过DOM元素属性绑定
        <input type="button" id="btn">
        document.getElementByld("btn").onclick = function (){
            alert("我被点了");
        }


案例：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

<input type="button" value="点我" onclick="on()"> <br>
<!--JS代码和HTML代码耦合在一块，并不好-->
<input type="button" value="再点我" id="btn">

<script>
    function on(){
        alert("我被点了");
    }

    document.getElementById("btn").onclick = function (){
        alert("我又被点了");
    }

</script>

</body>
</html>




常见事件：

onblur          元素失去焦点。
onfocus         元素获得焦点。
onchange        域的内容被改变。
onclick         当用户点击某个对象时调用的事件句柄。
onkeydown       某个键盘按键被按下。
onmouseout      鼠标从某元素移开。
onmouseover     鼠标移到某元素之上。
onsubmit        确认按钮被点击。


案例：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

<form id="register" action="#">
    <input type="text" name="username" />

    <input type="submit" value="提交">
</form>

<script>
    document.getElementById("register").onsubmit = function (){
        
        return false;//表单不会被提交
        return true;//表单被提交
    }

</script>






正则表达式：

概念:正则表达式定义了字符串组成的规则
定义:
    1.直接量:注意不要加引号
        var reg = /^\w{6,12}$/;
    2.创建RegExp对象
        var reg = new RegExp("/^\\w{6,12}$");
方法:
    test(str): 判断指定字符串是否符合规则，返回true或false

语法:
    ^: 表示开始
    $: 表示结束
    []: 代表某个范围内的单个字符，比如: [0-9]单个数字字符
    .: 代表任意单个字符，除了换行和行结束符
    \w: 代表单词字符: 字母、数字、下划线(_)，相当于[A-Za-z0-9_]
    \d: 代表数字字符: 相当于[0-9]
    
量词:
    +: 至少一个          var reg = /^\w+$/;
    *: 零个或多个
    ?∶零个或一个
    {x}: x个
    {m,}: 至少m个
    {m,n}: 至少m个，最多n个











表单验证：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>欢迎注册</title>
    <link href="../css/register.css" rel="stylesheet">
</head>
<body>

<div class="form-div">
    <div class="reg-content">
        <h1>欢迎注册</h1>
        <span>已有帐号？</span> <a href="#">登录</a>
    </div>
    <form id="reg-form" action="#" method="get">

        <table>
            <tr>
                <td>用户名</td>
                <td class="inputs">
                    <input name="username" type="text" id="username">
                    <br>
                    <span id="username_err" class="err_msg" style="display: none">用户名不符合规则</span>
                </td>
            </tr>

            <tr>
                <td>密码</td>
                <td class="inputs">
                    <input name="password" type="password" id="password">
                    <br>
                    <span id="password_err" class="err_msg" style="display: none">密码格式有误</span>
                </td>
            </tr>

            <tr>
                <td>手机号</td>
                <td class="inputs">
                    <input name="tel" type="text" id="tel">
                    <br>
                    <span id="tel_err" class="err_msg" style="display: none">手机号格式有误</span>
                </td>
            </tr>
        </table>

        <div class="buttons">
            <input value="注 册" type="submit" id="reg_btn">
        </div>
        <br class="clear">

    </form>

</div>

<script>

    // 1.验证用户名是否符合规则
    //   获取用户名的输入框
    var usernameInput = document.getElementById("username");

    //绑定onblur事件 失去焦点
    usernameInput.onblur = checkUsername;

    function checkUsername() {
        //获取用户输入的用户名
        var username = usernameInput.value.trim();

        //判断用户名是否符合规则：长度6~12，单词字符组成
        var reg = /^\w{6,12}$/
        var flag = reg.test(username);

        if (flag) {
            //符合规则

            document.getElementById("username_err").style.display = 'none';
        } else {
            //不符合规则
            document.getElementById("username_err").style.display = '';
        }

        return flag;
    }


    // 2.验证密码是否符合规则
    //   获取密码的输入框
    var passwordInput = document.getElementById("password");

    //绑定onblur事件 失去焦点
    passwordInput.onblur = checkPassword;

    function checkPassword() {
        //获取用户输入的密码
        var password = passwordInput.value.trim();

        //判断密码是否符合规则：长度6~12
        var reg = /^\w{6,12}$/
        var flag = reg.test(password);
        if (flag) {
            //符合规则

            document.getElementById("password_err").style.display = 'none';
        } else {
            //不符合规则
            document.getElementById("password_err").style.display = '';
        }
        return flag;
    }


    // 3.验证手机号是否符合规则
    //   获取手机号的输入框
    var telInput = document.getElementById("tel");

    //绑定onblur事件 失去焦点
    telInput.onblur = checkTel;

    function checkTel() {
        //获取用户输入的手机号
        var tel = telInput.value.trim();

        //判断手机号是否符合规则：长度11，数字组成，第一位是1
        var reg = /^[1]\d{10}$/
        var flag = reg.test(tel);
        if (flag) {
            //符合规则

            document.getElementById("tel_err").style.display = 'none';
        } else {
            //不符合规则
            document.getElementById("tel_err").style.display = '';
        }
        return flag;
    }

    //获取表单对象
    var regForm = document.getElementById("reg-form");

    //绑定onsubmit事件
    regForm.onsubmit = function () {
        //挨个判断每一个表单项是否都符合要求，如果有一个不符合，则返回false
        var flag = checkTel() && checkPassword() && checkUsername();
        return flag;
    }

</script>
</body>
</html>



























