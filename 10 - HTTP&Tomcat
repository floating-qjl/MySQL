什么是JavaWeb ?

    Web:全球广域网，也称为万维网(www)，能够通过浏览器访问的网站
    JavaWeb:是用Java技术来解决相关web互联网领域的技术栈




JavaWeb技术栈:
    B/S架构: Browser/Server，浏览器/服务器架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都
             存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可

    好处: 易于维护升级:服务器端升级后，客户端无需任何部署就可以使用到新的版本
    静态资源: HTML、CSS、JavaScript、图片等。负责页面展现
    动态资源: Servlet、JSP等。负责逻辑处理
    数据库: 负责存储数据
    HTTP协议: 定义通信规则
    Web服务器: 负责解析HTTP协议，解析请求数据，并发送响应数据

  






HTTP：
    概念: HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则


HTTP协议特点:
    1. 基于TCP协议: 面向连接，安全
    2. 基于请求-响应模型的: 一次请求对应一次响应
    3. HTTP协议是无状态的协议: 对于事务处理没有记忆能力。每次请求-响应都是独立的。
        缺点:多次请求间不能共享数据。Java中使用会话技术(Cookie、Session)来解决这个问题
        优点:速度快









HTTP-请求数据格式

请求数据分为3部分:
    1.请求行: 请求数据的第一行。其中GET表示请求方式，/
              表示请求资源路径，HTTP/1.1表示协议版本
    2.请求头: 第二行开始，格式为key: value形式。
    3.请求体: POST请求的最后一部分，存放请求参数


常见的HTTP请求头:
    Host: 表示请求的主机名
    User-Agent: 浏览器版本，例如Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79，
                IE浏览器的标识类似Mozilla/5.0 (Windows NT ...) like Gecko;
    Accept:表示浏览器能接收的资源类型，如text/* ,image/*或者*/*表示所有;
    Accept-Language:表示浏览器偏好的语言，服务器可以据此返回不同语言的网页;
    Accept-Encoding:表示浏览器可以支持的压缩类型，例如gzip, deflate等。



GET/HTTP/1.1
Host: www.itcast.cn
Connection: keep-alive
Cache-Control: max-age=0 Upgrade-Insecure-Requests:1
User-Agent: Mozilla/5.0 Chrome/91.0.4472.106


POST/HTTP/1.1
Host: www.itcast.cn
Connection: keep-alive
Cache-Control: max-age=o Upgrade-Insecure-Requests:1
User-Agent: Mozilla/5.0 Chrome/91.0.4472.106

username=superbaby&password=123456



GET请求和POST请求区别:
    1. GET请求请求参数在请求行中，没有请求体。
       POST请求请求参数在请求体中
    2. GET请求请求参数大小有限制，POST没有








HTTP-响应数据格式：

响应数据分为3部分:
    1. 响应行: 响应数据的第一行。其中HTTP/1.1表示协议版
               本，200表示响应状态码，OK表示状态码描述
    2. 响应头: 第二行开始，格式为key: value形式
    3. 响应体: 最后一部分。存放响应数据



常见的HTTP响应头:
    Content-Type: 表示该响应内容的类型，例如text/html,image/jpeg;
    Content-Length: 表示该响应内容的长度（字节数);
    Content-Encoding: 表示该响应压缩算法，例如gzip;
    Cache-Control: 指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒




HTTP/1.1 200 OK
Server: Tengine
Content-Type: text/html
Transfer-Encoding: chunked...
<html>
<head>
  <title></title>
</head>
<body></body>
</html>





状态码大类：

状态码分类                                         说明
1xx            响应中—―临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它
2xX            成功―—表示请求已经被成功接收，处理已完成
3xx            重定向——重定向到其它地方:它让客户端再发起一个请求以完成整个处理。
4XX            客户端错误—―处理发生错误，责任在客户端，如:客户端的请求一个不存在的资源，客户端未被授权，禁止访问等
5xx            服务器端错误—―处理发生错误，责任在服务端，如:服务端抛出异常，路由出错，HTTP版本不支持等





常见的响应状态码：

状态码                     英文描述                                        解释
200                          oK                      客户端请求成功，即处理成功，这是我们最想看到的状态码
302                         Found                    指示所请求的资源已移动到由Location响应头给定的URL，浏览器会自动重新访问到这个页面
304                      Not Modified                告诉客户端，你请求的资源自上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向
400                      Bad Request                 客户端请求有语法错误，不能被服务器所理解
403                       Forbidden                  服务器收到请求，但是拒绝提供服务，比如:没有权限访问相关资源
404                       Not Found                  请求资源不存在，一般是URL输入有误，或者网站资源被删除了
428                  Precondition Required           服务器要求有条件的请求，告诉客户端要想访问该资源，必须携带特定的请求头
429                   Too Many Requests              太多请求，可以限制客户端请求某个资源的数量，配合Retry-After(多长时间后可以请求)响应头一起使用
431              Request Header Fields Too Large     请求头太大，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。
405                  Method Not Allowed              请求方式有误，比如应该用GET请求方式的资源，用了POST
500                 Internal server Error            服务器发生不可预期的错误。服务器出异常了，赶紧看日志去吧
503                  Service unavailab1e             服务器尚未准备好处理请求,服务器刚刚启动,还未初始化好
511             Network Authentication Required      客户端需要进行身份验证才能获得网络访问权限







Web服务器：
    Web服务器是一个应该程序（软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，
    让web开发更加便捷。主要功能是“提供网上信息浏览服务”



Tomcat：
    概念: Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。
    JavaEE: Java Enterprise Edition，Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范:
            JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF
    Tomcat 也被称为Web容器、Servlet容器。Servlet需要依赖于Tomcat才能运行
    官网: https://tomcat.apache.org/




总结：

1. Web服务器作用?
     封装HTTP协议操作，简化开发
     可以将web项目部署到服务器中，对外提供网上浏览服务
2. Tomcat是一个轻量级的Web服务器，支持Servlet/JSP少量
   JavaEE规范，也称为Web容器，Servlet容器




Tomcat启动:双击: bin\startup.bat
控制台中文乱码:修改conf/ logging.properties
java.util.logging.consoleHandler.encoding = UTF-8（改成GBK）

关闭:
1.直接×掉运行窗口: 强制关闭
2.bin\shutdown.bat: 正常关闭
3. Ctrl+C: 正常关闭






Tomcat一基本使用

配置:
    1. 修改启动端口号: conf/server.xml
    注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号

启动时可能出现的问题:
    1. 端口号冲突: 找到对应程序，将其关闭掉
    2. 启动窗口一闪而过: 检查JAVA_HOME环境变量是否正确配置




Tomcat部署项目:
    将项目放置到webapps目录下，即部署完成
    
注：一般JavaWeb项目会被打成war包，然后将war包放到webapps目录下，Tomcat会自动解压缩war文件





IDEA中创建Maven Web项目：

编译后的Java字节码文件和resources的资源文件，放到WEB-INF下的classes目录下
pom.xml中依赖坐标对应的jar包，放入WEB-INF下的lib目录下



第一种：

使用骨架
    骨架:项目模板
    
1.选择web项目骨架，创建项目
2删除pom.xml中多余的坐标
3.补齐缺失的目录结构




第二种：

不使用骨架

1.选择web项目骨架，创建项目
2.pom.xml中添加打包方式为war
3.补齐缺失的目录结构: webapp






IDEA中使用Tomcat：

第一种：集成本地Tomcat
        将本地Tomcat集成到Idea中，然后进行项目部署即可
        
第二种：Tomcat Maven插件
     1. pom.xml 添加Tomcat插件
     2. 使用Maven Helper插件快速启动项目，选中项目，右键 --> Run Maven --> tomcat7:run





















