
要完成的功能列表清单:
1.查询
  查询所有数据
  查看详情
  条件查询
2.添加
3.修改
  修改全部字段
  修改动态字段
4.删除
  删除一个
  批量删除


准备环境：
    数据库表tb_brand
    实体类Brand
    测试用例
    安装MyBatisX插件（快速开发mybatis）



MyBatisX插件：
1.Mybatis×是一款基于IDEA的快速开发插件，为效率而生。
2.主要功能：
    XML和接口方法相互跳转
    根据接口方法生成statement
3.安装




查询所有数据：
1.编写接口方法: Mapper接口
  参数:无
  结果:List<Brand>
2.编写SQL语句:SQL映射文件
3.执行方法，测试

List<Brand> selectAll();

<select id="selectAll resultType="brand">
  select * from tb_brand;
</select>


MyBatis完成操作需要几步?
    三步:编写接口方法-->编写sQL -->执行方法


数据库表的字段名称和实体类的属性名称不一样，则不能自动封装数捱
解决方法：1.起别名：为不一样的列名起别名，让别名和实体类的属性名一样
              select id,brand_name as brandName，company_hame as companyName，ordered，description,status from tb_brand;
              缺点：每次查询都要起别名，不方便
            
          2.sql片段：
              <sql id="brand_column">
                  id, brand_name as brandName,company_name as companyName，ordered,description，status
              </sql>

              <select id="selectAll" resultType="brand">
                  select <include refid="brand_column"/> from tb_brand;
              </select>
              可以借助以上代码实现sql片段，但是不够灵活，每次只能查询固定的范围
           
          3.resultMap：
              定义<resultMap>标签
              在<select>标签中，使用resultMap属性替换resultType属性

              //id表示唯一标识
              //type表示映射的类型，支持别名
              
              <resultMap id="brandResultMap" type="brand">
                  <result column="brand_name" property="brandName"/>
                  <result column="company_name" property="companyName"/>
                  
                  //result   用于一般字段
                  //id       用于主键字段
                  //column   表的列名
                  //property 实体类的属性名
              </resultMap>
              
              <select id="selectAll" resultMap="brandRexultMap">
                  select * from tb_brand;
              </select>






查看详情：

1.编写接口方法:Mapper接口
  参数:id
  结果:Brand
2.编写SQL语句:SQL映射文件
3.执行方法，测试



Brand selectByld(int id);

<select id="selectByld" parameterType="int" resultType="brand">
  select * from tb_brand where id = #{id};
</select>



火参数占位符:
1．#{}:执行sQL时，会将#{}占位符替换为?,将来自动设置参数值
2．${}:拼sql。会存在SQL注入问题
3．使用时机:
   *参数传递的时候:#{}
   *表名或者列名不固定的情况下或进行动态设置以达到sql拼接的效果：${}，会存在SQL注入问题
   
*参数类型:parameterType:可以省略
*特殊字符处理:
   1.转义字符: &lt 为 "<" 号
   2.CDATA区：<![CDATA[内容]]>，idea中可使用 CD ，会有提示





条件查询

1.多条件查询：
  编写接口方法: Mapper接口
      参数:所有查询条件
      结果:List<Brand>
  编写SQL语句: SQL映射文件
  执行方法，测试

参数接收
1．散装参数:如果方法中有多个参数，需要使用@Param("SQL参数占位符")
2．对象参数
3. map集合参数

List<Brand> selectByCondition(@Param("status")int status,@Param("companyName") StringcompanyName, @Param("brandName") String brandName);

//接收参数
int status = 1;
String companyName ="华为";
String brandName ="华为";
//处理参数
companyName = "%" +companyName + "%";
brandName = "%" +companyNamel+"%";



//封装对象
List<Brand> selectByCondition(Brand brand);

Brand brand = new Brand();
brand.setStatus(status);
brand.setCompanyName(companyName);
brand. setBrandName (brandName);


//map集合
List<Brand> selectByCondition(Map map);

Map map = new HashMap();
map.put("status", status);
map.put("companyName", companyName);
map.put("brandName" , brandName);



sql语句：

<select id="selectByCondition" resultMap="brandResultMap">
  select *
  from tb_brand 
  where
    status = #{status}
    and company_name like #{companyName}
    and brand_name like #{brandName}
</select>


//这种方法有bug，若用户不想输入三个条件而只输入一个或者两个，则会出错






动态条件查询：

SQL语句会随着用户的输入或外部条件的变化而变化，我们称为动态SQL

MyBatis 对动态SQL有很强大的支撑:
if
choose (when, otherwise)
trim (where, set)
foreach



<select id="selectByCondition" resultMap="brandResultMap">
    select *
    from tb_brand
    where
    <if test="status != null">
        status = #{status}
    </if>
    <if test="companyName != null and companyName != '' ">
        and company_name like #{companyName}
    </if>
    <if test="brandName != null and brandName != '' ">
        and brand_name like #{brandName}
    </if>
    
</select>





