alt +鼠标左键:整列编辑

在实体类中,基本数据类型建议使用其对应的包装类型


//实体类

public class Brand {
  // id主键
  private Integer id;
  //品牌名称
  private String brandName;
  //企业名称
  private String companyName;
  //排序字段
  private Integer ordered;
  //描述信息
  private String description;
  //状态:0-禁用 1-启用
  private Integer status;//因此尽量使用包装类型，这样默认值为null，而非0，以免冲突引发不必要的麻烦
  
  //下面是getter、setter、toString
  
}


查询所有数据
1.获取Connection
2.定义SQL: select * from tb_brand;
3.获取PreparedStatement对象
4.设置参数:不需要
5.执行SQL
6.处理结果:List<Brand>
7．释放资源



//代码实现

@Test
public void testSelectAll() throws Exception {
  //1．获取Connection
  
  //3．加载配置文件
  Properties prop = new Properties();
  prop.load(new FileInputStream("jdbc-demo/src/druid. properties"));
  
  //4．获取连接池对象
  DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);
  
  //5．获取数据库连接Connection
  Connection conn = dataSource.getConnection();
  
  //6．定义SQL
  String sql = "select * from tb_brand;";
  
  //7．获取pstmt对象
  PreparedStatement pstmt = conn.prepareStatement(sql);
  
  //8．设置参数
  //无
  
  //9．执行SQL
  Resultset rs = pstmt.executeQuery();
  
  //10．处理结果 List<Brand>封装Brand对象，装载List集合
  Brand brand = null;
  List<Brand> brands = new ArrayList<>();
  
  while (rs.next(){
      //获取数据
      int id = rs.getInt("id");
      String brandName = rs.getString("brand_name");
      String companyName = rs.getString("company_name");
      int ordered = rs.getInt("ordered");
      String description = rs.getString("description");
      int status = rs.getInt("status");
      //封装Brand对象
      brand = new Brand();
      brand.setId(id);
      brand.setBrandName(brandName);
      brand.setCompanyName(companyName);
      brand.setOrdered(ordered);
      brand.setDescription(description);
      brand.setStatus(status);

      //装载集合
      brands.add(brand) ;

  }
  
  //11．释放资源
  rs.close();
  pstmt.close();
  conn.close();

}





/**
*添加
* 1.SQL: insert into tb_brand(brand_name,company_name,ordered,description,status) values(?,?,?,?,?);
* 2.参数:需要,除了id之外的所有参数信息
* 3.结果:boolean
*/


@Test
public void testAdd( throws Exception {
    //接收页面提交的参数
    String brandName = "香飘飘";
    String companyName = "香飘飘";
    int ordered = 1;
    String description = "绕地球一圈";
    int status = 1;
    
    //3．加载配置文件
    Properties prop = new Properties();
    prop.load(new FileInputStream("jdbc-demo/src/druid. properties"));
    
    //4．获取连接池对象
    DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);
    
    //5．获取数据库连接Connection
    Connection conn = dataSource.getConnection();
    
    //6．定义SQ
    String sql = "insert into tb_brand(brand_name,company_name,ordered,description,status) values(?,?,?,?,?);";
    
    //7．获取pstmt对象
    PreparedStatement pstmt = conn.prepareStatement(sql);
    
    //8．设置参数
    pstmt.setString( parameterIndex: 1, brandName);
    pstmt.setString( parameterIndex: 2,companyName);
    pstmt.setInt( parameterIndex: 3 , ordered);
    pstmt.setString( parameterIndex: 4 , description);
    pstmt.setInt( parameterIndex: 5,status);


    //9．执行SQL
    int count = pstmt.executeUpdate(); //影响的行数
    
    //10.处理结果
    System.out.println(count > 0) ;
    
    //11．释放资源
    pstmt.close();
    conn.close();

}





/**
*修改
*1. SQL:
update tb_brand
    set brand_name = ?,
    ompany_name = ?，
    ordered = ?，
    description = ?,
    status = ?
where id = ?
*2．参数:需要，所有数据
*3．结果: boolean
*/


@Test
public void testAdd( throws Exception {
    //接收页面提交的参数
    String brandName = "香飘飘";
    String companyName = "香飘飘";
    int ordered = 1000;
    String description = "绕地球三圈";
    int status = 1;
    int id = 4;
    
    //3．加载配置文件
    Properties prop = new Properties();
    prop.load(new FileInputStream("jdbc-demo/src/druid. properties"));
    
    //4．获取连接池对象
    DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);
    
    //5．获取数据库连接Connection
    Connection conn = dataSource.getConnection();
    
    //6．定义SQ
    String sql = " update tb_brand\n" +
                 "   set brand_name = ?,\n" +      
                 "   company_name   = ?,\n" +
                 "   ordered        = ?,\n" +
                 "   description    = ?,\n" +
                 "   status         = ?\n" +
                 " where id = ?";

    
    //7．获取pstmt对象
    PreparedStatement pstmt = conn.prepareStatement(sql);
    
    //8．设置参数
    pstmt.setString( parameterIndex: 1, brandName);
    pstmt.setString( parameterIndex: 2,companyName);
    pstmt.setInt( parameterIndex: 3, ordered);
    pstmt.setString( parameterIndex: 4, description);
    pstmt.setInt( parameterIndex: 5, status);
    pstmt.setInt( parameterIndex: 6, id);


    //9．执行SQL
    int count = pstmt.executeUpdate(); //影响的行数
    
    //10.处理结果
    System.out.println(count > 0) ;
    
    //11．释放资源
    pstmt.close();
    conn.close();

}







/**
*删除
*1. SQL:
    delete from tb_brand where id = ?
*2．参数:需要，id
*3．结果: boolean
*/



@Test
public void testAdd( throws Exception {
    //接收页面提交的参数
    int id = 4;
    
    //3．加载配置文件
    Properties prop = new Properties();
    prop.load(new FileInputStream("jdbc-demo/src/druid. properties"));
    
    //4．获取连接池对象
    DataSource dataSource = DruidDataSourceFactory.createDataSource(prop);
    
    //5．获取数据库连接Connection
    Connection conn = dataSource.getConnection();
    
    //6．定义SQ
    String sql = " delete from tb_brand where id = ?"; 

    
    //7．获取pstmt对象
    PreparedStatement pstmt = conn.prepareStatement(sql);
    
    //8．设置参数
    pstmt.setInt( parameterIndex: 1, id);


    //9．执行SQL
    int count = pstmt.executeUpdate(); //影响的行数
    
    //10.处理结果
    System.out.println(count > 0) ;
    
    //11．释放资源
    pstmt.close();
    conn.close();

}


















