概念: AJAX(Asynchronous JavaScript And XML):异步的JavaScript和XML
AJAX作用:
    1．与服务器进行数据交换: 通过AJAX可以给服务器发送请求，并获取服务器响应的数据
                            使用了AJAX和服务器进行通信，就可以使用HTML+AJAX来替换JSP页面了
    2. 异步交互: 可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如:搜索联想、用户名是否可用校验，等等...





AJAX快速入门:

1.编写AjaxServlet，并使用response输出字符串

2.创建XMLHttpRequest 对象: 用于和服务器交换数据
    var xmlhttp;
    if (window.XMLHttpRequest) {
        // code for IE7+, Firefox, Chrome, Opera,Safarixmlhttp = new XMLHttpRequest();
    }else {
        // code for IE6, IE5
        xmlhttp = new ActiveXObject(""Microsoft.XMLHTTP");
        
3.向服务器发送请求
    xmlhttp.open(""GET"","url"");
    xmlhttp.send();/发送请求
    
4.获取服务器响应数据
    xmlhttp.onreadystatechange = function (){
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200){
            alert(xmlhttp.responseText);
        }
    }





代码：

AjaxServlet文件：

@WebServlet("/ajaxServlet")
public class AjaxServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //响应数据
        response.getWriter().write("hello ajax~~~");

    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doGet(request, response);
    }
}





ajax-demo.html文件：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

<script>
    //创建核心对象
    var xhttp;
    if(window.XMLHttpRequest){
        xhttp = new XMLHttpRequest();
    }else{
        //code for IE6, IE5
        xhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }

    //发送请求
    xhttp.open("GET","http://localhost:8080/ajax-demo2/ajaxServlet");
    xhttp.send();

    //获取响应
    xhttp.onreadystatechange = function (){
        if (this.readyState == 4 && this.status == 200){
                alert(this.responseText);
        }
    }

</script>



</body>
</html>





案例：

使用AJAX验证用户名是否存在：
    需求: 在完成用户注册时，当用户名输入框失去焦点时，校验用户名是否在数据库已存在



代码：

SelectUserServlet文件：

@WebServlet("/selectUserServlet")
public class SelectUserServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        //接受用户名
        String username = request.getParameter("username");

        //调用service查询user对象
        boolean flag = true;

        //响应一个标记
        response.getWriter().write("" + flag);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        this.doGet(request, response);
    }
} 



register.html文件：

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>欢迎注册</title>
    <link href="css/register.css" rel="stylesheet">
</head>
<body>

<div class="form-div">
    <div class="reg-content">
        <h1>欢迎注册</h1>
        <span>已有帐号？</span> <a href="login.html">登录</a>
    </div>
    <form id="reg-form" action="#" method="get">

        <table>

            <tr>
                <td>用户名</td>
                <td class="inputs">
                    <input name="username" type="text" id="username">
                    <br>
                    <span id="username_err" class="err_msg" style="display: none">用户名已存在</span>
                </td>

            </tr>

            <tr>
                <td>密码</td>
                <td class="inputs">
                    <input name="password" type="password" id="password">
                    <br>
                    <span id="password_err" class="err_msg" style="display: none">密码格式有误</span>
                </td>
            </tr>


            <tr>
                <td>验证码</td>
                <td class="inputs">
                    <input name="checkCode" type="text" id="checkCode">
                    <img src="imgs/a.jpg">
                    <a href="#" id="changeImg">看不清？</a>
                </td>
            </tr>

        </table>

        <div class="buttons">
            <input value="注 册" type="submit" id="reg_btn">
        </div>
        <br class="clear">
    </form>

    <script>
        //给用户名输入框绑定 失去焦点事件
        document.getElementById("username").onblur = function (){
            //发送ajax请求
            //获取用户名的值
            var username = this.value;

            //创建核心对象
            var xhttp;
            if(window.XMLHttpRequest){
                xhttp = new XMLHttpRequest();
            }else{
                //code for IE6, IE5
                xhttp = new ActiveXObject("Microsoft.XMLHTTP");
            }

            //发送请求
            xhttp.open("GET","http://localhost:8080/ajax-demo2/selectUserServlet?username=" + username);
            xhttp.send();

            //获取响应
            xhttp.onreadystatechange = function (){
                if (this.readyState == 4 && this.status == 200){
                    //alert(this.responseText);
                    //判断
                    if(this.responseText == "true"){
                        //用户名存在，显示提示信息
                        document.getElementById("username_err").style.display = '';
                    }else{
                        //用户名不存在
                        document.getElementById("username_err").style.display = 'none';
                    }
                }
            }



        }
    </script>

</div>
</body>
</html>









Axios异步框架：
    Axios 对原生的AJAX进行封装，简化书写
    官网: https://www.axios-http.cn




Axios快速入门：
1.引入 axios 的js文件
    <script src="js/axios-0.18.0.js"></script>
    
2.使用axios 发送请求，并获取响应结果
    axios({
        method:"get",
        url:"http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan"
    }).then(function (resp){
        alert(resp.data);
    })
    
    axios({
        method:"post"",
        url:"http://localhost:8080/ajax-demo1/aJAXDemo1",
        data:"username=zhangsan"
    }).then(function (resp){
        alert(resp.data);
    });


    //then用于获取对应的响应，参数名随便写




Axios请求方式别名：

为了方便起见，Axios已经为所有支持的请求方法提供了别名。

get(url)               发起GET方式请求
post(url,请求参数)     发起POST方式请求




发送get请求：
    axios.get("url")
        .then(function (resp){
            alert(resp.data);
    });


发送post请求
    axios.post("url", "参数")
        .then(function (resp){
            alert(resp.data);
    });







JSON:
    概念: JavaScript Object Notation。JavaScript 对象表示法
    由于其语法简单，层次结构鲜明，现多用于作为数据载体，在网络中进行数据传输


JSON基本语法：


定义:
var 变量名= {"key1": value1,
             "key2": value2,
              ...
            };


获取数据:
    变量名.key
    json.name


value的数据类型为:
    数字(整数或浮点数)
    字符串(在双引号中)
    逻辑值(true 或 false)
    数组(在方括号中)
    对象(在花括号中)
    null




JSON数据和Java对象转换:
    请求数据: JSON字符串转为Java对象
    响应数据: Java对象转为JSON字符串




Fastjson是阿里巴巴提供的一个Java语言编写的高性能功能完善的JSON库，是目前Java语言中最快的JSON库，可以实现Java对象和JSON字符串的相互转换。

使用:
    1.导入坐标
    <dependency>
        <groupld>com.alibaba</groupld>
        <artifactld>fastjson</artifactld>
        <version>1.2.62</version>
    </dependency>
    
    2.Java对象转JSON
    String jsonStr = JSON.toJSONString(obj);
    
    3.JSON字符串转Java对象
    User user = JSON.parseObject(jsonStr, User.class);





代码：

 public static void main(String[] args) {
        //将java对象转为JSON字符串
        User user = new User();
        user.setId(1);
        user.setUsername("zhangsan");
        user.setPassword("123");

        String jsonString = JSON.toJSONString(user);
        System.out.println(jsonString);

        //将JSON字符串转为java对象

        User u = JSON.parseObject("{\"id\":1,\"password\":\"123\",\"username\":\"zhangsan\"}",User.class);
        System.out.println(u);


    }






































