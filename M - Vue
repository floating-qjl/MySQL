Vue:

Vue是一套前端框架，免除原生JavaScript中的DOM操作，简化书写
基于MVVM(Model-View-ViewModel)思想，实现数据的双向绑定，将编程的关注点放在数据上
官网: https://cn.vueis.org



代码：

<div id="app">
    <input name="username" v-model="username">
    {{username}}
</div>

<script src="js/vue.js"></script>
<script>
    new Vue({
        el:"#app",
        data(){
            return{
                username:""
            }
        }
    });
</script>





Vue快速入门：
  1.新建HTML页面，引入 Vue.js文件
  2.在JS代码区域，创建Vue核心对象，进行数据绑定
  3.编写视图


Vue常用指令：
  指令: HTML标签上带有v-前缀的特殊属性，不同指令具有不同含义。例如: v-if，v-for..
  常用指令：


指令                                                     作用
v-bind                                      为HTML标签绑定属性值，如设置href , css样式等
v-model                                     在表单元素上创建双向数据绑定
v-on                                        为HTML标签绑定事件

v-if
v-else                                      条件性的渲染某元素，判定为true时渲染,否则不渲染
v-else-if

v-show                                      根据条件展示某元素，区别在于切换的是display属性的值
v-for                                       列表渲染，遍历容器的元素或者对象的属性




代码：

<div id="app">
    <a v-bind:href="url"> 点击一下</a>
    <a :href="url"> 点击一下</a>
</div>

<script src="js/vue.js"></script>
<script>
    new Vue({
        el:"#app",
        data(){
            return{
                username:"",
                url:"https://www.baidu.com"
            }
        }
    });
</script>




<div id="app">
    <input type="button" value="一个按钮" v-on:click="show()"><br>
    <input type="button" value="一个按钮" @click="show()">

</div>

<script src="js/vue.js"></script>
<script>
    new Vue({
        el:"#app",
        data(){
            return{
                username:"",
                url:"https://www.baidu.com"
            }
        },
        methods:{
            show(){
                alert("我被点了。。。");
            }
        }
    });
</script>






<div id="app">
    <div v-if="count == 3">div1</div>
    <div v-else-if="count == 4">div2</div>
    <div v-else>div3</div>
    <hr>

    <div v-show="count == 3">div v-show</div>

    <hr>

    <input v-model=""count>
</div>

<script src="js/vue.js"></script>
<script>
    new Vue({
        el:"#app",
        data(){
            return{
                username:"",
                url:"https://www.baidu.com",
                count:3
            }
        },
        methods:{
            show(){
                alert("我被点了。。。");
            }
        }
    });
</script>






<div id="app">

    <div v-for="addr in addrs">
        {{addr}} <br>
    </div>

    <div v-for="(addr,i) in addrs">
        {{i}}--{{addr}} <br>
    </div>

</div>

<script src="js/vue.js"></script>
<script>
    new Vue({
        el:"#app",
        data(){
            return{
                username:"",
                url:"https://www.baidu.com",
                count:3,
                addrs:["北京","上海","西安"]
            }
        },
        methods:{
            show(){
                alert("我被点了。。。");
            }
        }
    });
</script>







vue生命周期:

生命周期的八个阶段:每触发一个生命周期事件，会自动执行一个生命周期方法(钩子)

状态                                       阶段周期
beforeCreate                                创建前
created                                     创建后
beforeMount                                 载入前
mounted                                    挂载完成
beforeUpdate                                更新前
updated                                     更新后
beforeDestroy                               销毁前
destroyed                                   销毁后



mounted: 挂载完成，Vue初始化成功，HTML页面渲染成功。发送异步请求，加载数据




代码：

new Vue({
  el:"#app",
  mounted(){
    alert("vue挂载完毕，发送异步请求");
  }
});










































