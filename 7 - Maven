
Maven是专门用于管理和构建Java项目的工具，它的主要功能有:
  提供了一套标准化的项目结构 
  提供了一套标准化的构建流程(编译，测试，打包，发布.....)
  提供了一套依赖管理机制

Maven提供了一套标准化的项目结构，所有IDE使用Maven构建的项目结构完全一样，所有IDE创建的Maven项目可以通用

Maven提供了一套简单的命令来完成项目构建

依赖管理其实就是管理你项目所依赖的第三方资源(jar包、插件...)






Apache Maven是一个项目管理和构建工具，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档


仓库分类:
本地仓库:自己计算机上的一个目录
中央仓库:由Maven团队维护的全球唯一的仓库
    地址: https://repo1.maven.org/maven2/
远程仓库(私服):一般由公司团队搭建的私有仓库

当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包:
  如果有，则在项目直接引用;
  如果没有，则去中央仓库中下载对应的jar包到本地仓库。
  
还可以搭建远程仓库，将来jar包的查找顺序则变为:
  本地仓库 → 远程仓库 → 中央仓库




Maven安装配置：
1．解压apache-maven-3.6.1.rar既安装完成
2. 配置环境变量MAVEN_HOME为安装路径的bin目录
3．配置本地仓库:修改conf/settings.xml中的<localRepository>为一个指定目录
4．配置阿里云私服:修改conf/settings.xml中的 <mirrors> 标签，为其添加如下子标签:
    <mirror>
      <id>alimaven</id>
      <name>aliyun maven</name>
      <url>http://maven.aliyun.com/nexus/content/groups/publicl<lurl>
      <mirrorOf>central</mirrorOf>
    </mirror>



Maven常用命令
compile :编译
clean:清理
test:测试
package:打包
install:安装





Maven生命周期
  Maven构建项目生命周期描述的是一次构建过程经历经历了多少个事件
  Maven对项目构建的生命周期划分为3套
    clean:清理工作
    default:核心工作，例如编译，测试，打包，安装等
    site:产生报告，发布站点等
    
同一生命周期内，执行后边的命令，前边的所有命令会自动执行

第一种：
  pre-clean clean post-clean
第二种：
  cmpile testpackageinstall
第三种：
  pre-site sitepost-site







IDEA配置Maven环境
1．选择IDEA中 File --> Settings
2．搜索maven
3．设置IDEA使用本地安装的Maven，并修改配置文件路径





Maven坐标详解:

什么是坐标?
  Maven中的坐标是资源的唯一标识
  使用坐标来定义项目或引入项目中需要的依赖


Maven坐标主要组成:
  groupld:定义当前Maven项目隶属组织名称(通常是域名反写，例如: com.itheima)
  artifactld:定义当前Maven项目名称（通常是模块名称，例如order-service、goods-service)
  version:定义当前项目版本号



IDEA导入Maven项目
1．选择右侧Maven面板，点击＋号
2．选中对应项目的pom.xml文件，双击即可
3．如果没有Maven面板，选择 View → Appearance →Tool Window Bars






















